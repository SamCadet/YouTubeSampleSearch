import os
import sys
from YouTubeSampleSearch_Ui import Ui_MainWindow
from PyQt5.QtWidgets import QMainWindow
from PyQt5 import QtCore
from PyQt5 import QtWidgets as qtw
from PyQt5.QtWidgets import QFileDialog, QMainWindow, QApplication
from PyQt5.QtGui import QPixmap
from PyQt5.QtCore import Qt
from pytube import YouTube
import google_auth_oauthlib.flow
from nltk.corpus import wordnet as wn
import random
# import googleapiclient.discover
# import googleapiclient.errors


# YouTube Sample Search - randomized search terms challenge producers to sample obscure music

ytApi = os.environ['YOUTUBE_API_KEY']


class Window(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()

        self.setupUi(self)
        self.setWindowTitle('YouTube Sample Search')
        self.downloadButton.setAutoDefault(True)
        self.browseButton.clicked.connect(self.browseButtonPushed)
        self.searchButton.clicked.connect(self.searchButtonPushed)

    def adjectivesGroup(self):
        adjectives = list()

        for word in wn.all_synsets(wn.ADJECTIVE):
            adjectives.setText(word.lemma_nouns())
            if len(adjectives) == 20:
                break

        adjectivesResult = random.choice(adjectives)

        self.adjectiveLineEdit = str(
            self.adjectiveLineEdit.setText(adjectivesResult))

        return self.adjectiveLineEdit

    def timePeriodGroup(self):
        timePeriod = ('50s', '60s', '70s', '80s',
                      '90s', '00s', '2010s', '2020s')

        timePeriodResult = random.choice(timePeriod)

        self.timePeriodLineEdit = str(
            self.timePeriodLineEdit.setText(timePeriodResult))

        return self.timePeriodLineEdit

    def areaGroup(self):
        area = ('Ghanaian', 'Chinese', 'Japanese', 'Indian', 'South African', 'American', 'Mexican', 'Canadian', 'Nigerian', 'Haitian',
                'Jamaican', 'English', 'French', 'Spanish', 'Puerto Rican', 'Cuban', 'German')

        areaResult = random.choice(area)

        self.nationLineEdit = str(
            self.nationLineEdit.setText(areaResult))

        return self.nationLineEdit

    def genreGroup(self):
        genre = ('Rap', 'Rock', 'R&B', 'Soul', 'Pop', 'Metal', 'Classical',
                 'Country', 'Funk', 'OST', 'TV themes', 'Movie Themes', 'Commercials', 'Movie Soundtracks')

        genreResult = random.choice(genre)

        self.genreLineEdit = str(
            self.genreLineEdit.setText(genreResult))

        return self.genreLineEdit

    def searchButtonPushed(self):

        # self.adjectivesGroup()
        self.timePeriodGroup()
        self.areaGroup()
        self.genreGroup()

        scopes = ['https://www.googleapis.com/auth/youtube.force-ssl']
        apiServiceName = 'youtube'
        apiVersion = 'v3'
        clientSecretsFile = 'Google_Client_Secret_ID.json'
        # clientSecretsFile = os.environ['GOOGLE_QUICKSTART']

        flow = google_auth_oauthlib.flow.InstalledAppFlow.from_client_secrets_file(
            clientSecretsFile, scopes)
        credentials = flow.run_console()
        youtube = googleapiclient.discovery.build(
            apiServiceName, apiVersion, credentials=credentials)

        request = youtube.search().list(part='snippet', maxResults=30, q='music')

        response = request.execute()

        print(response)

    def browseButtonPushed(self):
        filename = QFileDialog.getExistingDirectory(self, 'Save File')
        if filename:
            self.fileLocationTextEdit.setText(str(filename))

    # TODO: def downloadButtonPushed(self):


if __name__ == '__main__':
    app = qtw.QApplication([])
    app.setStyle('Fusion')
    window = Window()
    window.show()
    sys.exit(app.exec_())
